// CRUD tests for UnitTypes using the autogenerated NocoDB client
const cpqClient = require('../cpq_backend_client'); // Use the new CPQ client
const assert = require('assert');

async function unitTypeCrudTest() {
    // const client = createApiClient(); // Old client instantiation
    // const api = new  ApiClient.UnitTypeApi(client); // Old API instantiation

    let createdUnitTypeId = null;

    // Test Data
    const unitTypeName = `TestUnitType_${Date.now()}`;
    const updatedUnitTypeName = `UpdatedTestUnitType_${Date.now()}`;

    try {
        // 1. Create UnitType
        console.log(`   Attempting to create UnitType: ${unitTypeName}`);
        const createData = { "name": unitTypeName , "category": "TestCategory" }; // Adjust fields as per your schema
        const createdUnitType = await cpqClient.unitType.create(createData);
        assert(createdUnitType, 'Create operation failed to return a result.');
        assert(createdUnitType.id, 'Created UnitType does not have an ID.');
        assert.strictEqual(createdUnitType.name, unitTypeName, `Expected name to be ${unitTypeName} but got ${createdUnitType.name}`);
        createdUnitTypeId = createdUnitType.id;
        console.log(`   ✅ UnitType created successfully with ID: ${createdUnitTypeId}`);

        // 2. Read UnitType (Get by ID)
        console.log(`   Attempting to read UnitType with ID: ${createdUnitTypeId}`);
        const fetchedUnitType = await cpqClient.unitType.getById(createdUnitTypeId);
        assert(fetchedUnitType, 'Read operation failed to return a result.');
        assert.strictEqual(fetchedUnitType.id, createdUnitTypeId, `Fetched UnitType ID ${fetchedUnitType.id} does not match created ID ${createdUnitTypeId}`);
        assert.strictEqual(fetchedUnitType.name, unitTypeName, `Fetched UnitType name ${fetchedUnitType.name} does not match original name ${unitTypeName}`);
        console.log(`   ✅ UnitType read successfully: ${fetchedUnitType.name}`);

        // 3. Update UnitType - NOTE: The new client does not have a generic 'update' for unitType yet.
        // Assuming we'd add it or use specific update logic if available.
        // For now, this step will be commented out or adapted if an update method is added to the client.
        /* 
        console.log(`   Attempting to update UnitType with ID: ${createdUnitTypeId} to name: ${updatedUnitTypeName}`);
        const updateData = { name: updatedUnitTypeName }; 
        const updatedUnitType = await cpqClient.unitType.update(createdUnitTypeId, updateData); // Assumes .update exists
        assert(updatedUnitType, 'Update operation failed to return a result.');
        assert.strictEqual(updatedUnitType.id, createdUnitTypeId, `Updated UnitType ID ${updatedUnitType.id} does not match created ID ${createdUnitTypeId}`);
        assert.strictEqual(updatedUnitType.name, updatedUnitTypeName, `Expected updated name to be ${updatedUnitTypeName} but got ${updatedUnitType.name}`);
        console.log(`   ✅ UnitType updated successfully to: ${updatedUnitType.name}`);
        */
        console.log('   Skipping UnitType update test as client.unitType.update is not implemented yet.');

        // 4. List UnitTypes (verify creation)
        console.log(`   Attempting to list UnitTypes to verify changes`);
        const listResult = await cpqClient.unitType.list(); 
        assert(listResult && Array.isArray(listResult), 'List operation failed or returned an unexpected structure.');
        // If update was skipped, we look for the original name.
        const expectedNameToFind = /*updatedUnitType ? updatedUnitTypeName :*/ unitTypeName;
        const foundUnitType = listResult.some(ut => ut.id === createdUnitTypeId && ut.name === expectedNameToFind);
        assert(foundUnitType, `UnitType (ID: ${createdUnitTypeId}, Name: ${expectedNameToFind}) not found in list.`);
        console.log(`   ✅ UnitType list verified.`);

    } catch (error) {
        console.error(`   ❌ Test step failed: ${error.message}`);
        if (error.response && error.response.body) {
            console.error('   API Error Response:', JSON.stringify(error.response.body, null, 2));
        }
        throw error; // Re-throw to fail the test
    } finally {
        // 5. Delete UnitType (Cleanup)
        if (createdUnitTypeId) {
            try {
                console.log(`   Attempting to delete UnitType with ID: ${createdUnitTypeId}`);
                await cpqClient.unitType.delete(createdUnitTypeId);
                console.log(`   ✅ UnitType deleted successfully: ${createdUnitTypeId}`);

                // Optionally, verify deletion by trying to fetch it again
                try {
                    await cpqClient.unitType.getById(createdUnitTypeId);
                    // If findById succeeds, it means deletion failed
                    assert.fail(`UnitType with ID ${createdUnitTypeId} was found after deletion attempt.`);
                } catch (errorAfterDelete) {
                    // Expect a 404 or similar error, depending on API behavior
                    // This confirms the deletion was successful
                    console.log(`   ✅ UnitType deletion confirmed (could not be found).`);
                }
            } catch (deleteError) {
                console.error(`   ❌ Cleanup failed: Could not delete UnitType with ID: ${createdUnitTypeId}. Error: ${deleteError.message}`);
                // Decide if this should fail the overall test or just be logged
            }
        }
    }
}

module.exports = unitTypeCrudTest;

