// CRUD tests for Products using the autogenerated NocoDB client
const cpqClient = require('../cpq_backend_client'); // Use the new CPQ client
const assert = require('assert');

async function productCrudTest() {
    let createdUnitTypeId = null;
    let createdProductId = null;

    // Test Data
    const unitTypeName = `TestUnitTypeForProduct_${Date.now()}`;
    const productName = `TestProduct_${Date.now()}`;
    const productDescription = 'A product for testing purposes';
    const baseLaborCost = "10.50"; // Ensure this is a string if the API expects a string for decimal fields
    const updatedProductName = `UpdatedTestProduct_${Date.now()}`;

    try {
        // --- Prerequisite: Create a UnitType ---
        console.log(`   Attempting to create UnitType for Product: ${unitTypeName}`);
        const unitTypeCreateData = { "name": unitTypeName, "category": "ProductTestCategory" };
        const createdUnitType = await cpqClient.unitType.create(unitTypeCreateData);
        assert(createdUnitType && createdUnitType.id, 'Failed to create UnitType for product test.');
        createdUnitTypeId = createdUnitType.id;
        console.log(`   ✅ UnitType created successfully with ID: ${createdUnitTypeId}`);

        // --- Product CRUD ---
        // 1. Create Product
        console.log(`   Attempting to create Product: ${productName}`);
        const createProductData = {
            name: productName,
            description: productDescription,
            product_unit_type_id: createdUnitTypeId,
            base_labor_cost_per_product_unit: baseLaborCost 
        };
        const createdProduct = await cpqClient.product.create(createProductData);
        assert(createdProduct, 'Create product operation failed to return a result.');
        assert(createdProduct.id, 'Created Product does not have an ID.');
        assert.strictEqual(createdProduct.name, productName, `Expected product name to be ${productName} but got ${createdProduct.name}`);
        assert.strictEqual(createdProduct.product_unit_type_id, createdUnitTypeId, 'Product unit type ID does not match.');
        // Note: Decimal fields might be returned as strings or numbers depending on the client/API. Adjust assertion if needed.
        assert.strictEqual(String(createdProduct.base_labor_cost_per_product_unit), baseLaborCost, 'Product base labor cost does not match.');
        createdProductId = createdProduct.id;
        console.log(`   ✅ Product created successfully with ID: ${createdProductId}`);

        // 2. Read Product (Get by ID)
        console.log(`   Attempting to read Product with ID: ${createdProductId}`);
        const fetchedProduct = await cpqClient.product.getById(createdProductId);
        assert(fetchedProduct, 'Read product operation failed to return a result.');
        assert.strictEqual(fetchedProduct.id, createdProductId, `Fetched Product ID ${fetchedProduct.id} does not match created ID ${createdProductId}`);
        assert.strictEqual(fetchedProduct.name, productName, `Fetched Product name ${fetchedProduct.name} does not match original name ${productName}`);
        console.log(`   ✅ Product read successfully: ${fetchedProduct.name}`);

        // 3. Update Product - Assuming client.product.update(id, data) exists
        // If the API uses PUT and expects all fields, ensure all required fields are sent.
        // If it uses PATCH, only send changed fields.
        // For this example, we'll assume a PATCH-like behavior or a PUT where all fields are re-sent.
        console.log(`   Attempting to update Product with ID: ${createdProductId} to name: ${updatedProductName}`);
        const updateProductData = { 
            name: updatedProductName,
            description: "Updated description",
            product_unit_type_id: createdUnitTypeId, // Keep the same unit type or update if necessary
            base_labor_cost_per_product_unit: "12.75" 
        };
        // Assuming the update method is similar to other CRUD operations in the client
        // This might be cpqClient.product.update(createdProductId, updateProductData)
        // Or it could be specific like cpqClient.product.patch(createdProductId, updateProductData)
        // For now, we'll assume an 'update' method. If it doesn't exist, this step will fail or needs adjustment.
        
        // The products.py doesn't have an update/PUT/PATCH endpoint yet.
        // So we will skip this step for now.
        console.log('   Skipping Product update test as the API endpoint / client method is not implemented yet.');
        /*
        const updatedProduct = await cpqClient.product.update(createdProductId, updateProductData); // This line would be used if update exists
        assert(updatedProduct, 'Update product operation failed to return a result.');
        assert.strictEqual(updatedProduct.id, createdProductId, `Updated Product ID ${updatedProduct.id} does not match created ID ${createdProductId}`);
        assert.strictEqual(updatedProduct.name, updatedProductName, `Expected updated product name to be ${updatedProductName} but got ${updatedProduct.name}`);
        assert.strictEqual(updatedProduct.base_labor_cost_per_product_unit, "12.75", 'Product base labor cost was not updated.');
        console.log(`   ✅ Product updated successfully to: ${updatedProduct.name}`);
        */

        // 4. List Products (verify creation/update)
        console.log(`   Attempting to list Products to verify changes`);
        const listResult = await cpqClient.product.list(); 
        assert(listResult && Array.isArray(listResult.data || listResult), 'List products operation failed or returned an unexpected structure.');
        const productsArray = listResult.data || listResult; // Adapt based on actual client response structure

        const expectedNameToFindInList = productName; // Since update is skipped
        const foundProduct = productsArray.some(p => p.id === createdProductId && p.name === expectedNameToFindInList);
        assert(foundProduct, `Product (ID: ${createdProductId}, Name: ${expectedNameToFindInList}) not found in list.`);
        console.log(`   ✅ Product list verified.`);

    } catch (error) {
        console.error(`   ❌ Product CRUD Test step failed: ${error.message}`);
        if (error.response && error.response.body) {
            console.error('   API Error Response:', JSON.stringify(error.response.body, null, 2));
        } else if (error.stack) {
            console.error('   Stack Trace:', error.stack);
        }
        throw error; // Re-throw to fail the test
    } finally {
        // 5. Delete Product (Cleanup)
        if (createdProductId) {
            try {
                console.log(`   Attempting to delete Product with ID: ${createdProductId}`);
                await cpqClient.product.delete(createdProductId); // Assumes .delete(id) exists
                console.log(`   ✅ Product deleted successfully: ${createdProductId}`);

                // Optionally, verify deletion by trying to fetch it again
                try {
                    await cpqClient.product.getById(createdProductId);
                    assert.fail(`Product with ID ${createdProductId} was found after deletion attempt.`);
                } catch (errorAfterDelete) {
                    // Expect a 404 or similar error
                    console.log(`   ✅ Product deletion confirmed (could not be found).`);
                }
            } catch (deleteError) {
                console.error(`   ❌ Cleanup failed: Could not delete Product with ID: ${createdProductId}. Error: ${deleteError.message}`);
            }
        }

        // Delete the prerequisite UnitType
        if (createdUnitTypeId) {
            try {
                console.log(`   Attempting to delete prerequisite UnitType with ID: ${createdUnitTypeId}`);
                await cpqClient.unitType.delete(createdUnitTypeId);
                console.log(`   ✅ Prerequisite UnitType deleted successfully: ${createdUnitTypeId}`);
            } catch (deleteUnitTypeError) {
                console.error(`   ❌ Cleanup failed: Could not delete prerequisite UnitType with ID: ${createdUnitTypeId}. Error: ${deleteUnitTypeError.message}`);
            }
        }
    }
}

module.exports = productCrudTest;
